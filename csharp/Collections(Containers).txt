Arrays: 
	int[] numbers = new int[10];  // default limit is 2 GB
	numbers[0] = 12;
	numbers[1] = 27;
	//or//
	var numbers = new int[10] { 12, 27 };  // everything else will be filled with zeros
	//or//
	int[] numbers = { 12, 27 };
	//or//
	var numbers = new[] { 12, 27 };

	int[][] arrays = new int[5][]  // in c# syntax reversed, must be int[][5] (as in c++)
	{
		new[] { 1, 2 },
		new[] { 12, 79 }
		...
	};

	Rectangular array: // best choice
		int[,] grid = new int[5, 10];
		var sGrid = new int[,]
		{
			{1,2,3,4,5},
			{2,3,4,5,6},
			{3,4,5,6,7},
		};

	Merhods:
		Array.IndexOf();
		Array.BinarySearch();
		Array.Sort();
		Array.Copy();
		Array.Clear();

List<T>:
	IList ls = new List<int>();
	var ls = new List<int> { 123, 99, 42 };
	List ls = new() { 123, 99, 42 };

	Methods:
		IndexOf();
		LastIndexOf();
		Find();
		FindLast();
		FindAll();
		Sort();
		BinarySearch();

Collection<T>:

ReadOnlyCollection<T>:

Dictionary<TKey, TValue>:
	var d = new Dictionary<string, int> { { "One", 1 }, { "Two", 2 } };
	var d = new Dictionary<string, int> { ["One"] = 1, ["Two"] = 2 };

SortedDictionary<TKey, TValue>:

HashSet<T>:

SortedSet<T>:

Queue<T>:

Stack<T>:

LinkedList<T>:

ImmutableArray<T>: