List<String> lowCaloricDishesName = menu.stream()
                                        .filter(d -> d.getCalories() < 400)
                                        .sorted(comparing(Dish::getCalories))
                                        .map(Dish::getName)
                                        .collect(toList());

List<String> lowCaloricDishesName = menu.parallelStream()
                                        .filter(d -> d.getCalories() < 400)
                                        .sorted(comparing(Dish::getCalories))
                                        .map(Dish::getName)
                                        .collect(toList());

List<Integer> numbers = Arrays.asList(1, 2, 1, 3, 3, 2, 4);

numbers.stream()
       .filter(i -> i % 2 == 0)
       .distinct() // remove duplicates
       .forEach(System.out::println);

(Apple apple) -> apple.getWeight()              Apple::getWeight
() -> Thread.currentThread().dumpStack()        Thread.currentThread()::dumpStack
(str, i) -> str.substring(i)                    String::substring
(String s) -> s.toUpperCase()                   String::toUpperCase.
(String s) -> System.out.println(s)             System.out::println
(String s) -> this.isValidName(s)               this::isValidName
Integer::parseInt
String::length
expensiveTransaction::getValue // class instance method reference
ClassName::new

inventory.sort(comparing(Apple::getWeight)
         .reversed()
         .thenComparing(Apple::getCountry)) // secont parameter for comparing

Predicate<Apple> notRedApple = redApple.negate(); // all NOT red apples

Predicate<Apple> redAndHeavyAppleOrGreen = redApple.and(apple -> apple.getWeight() > 150)
                                                   .or(apple -> GREEN.equals(a.getColor()));