std::auto_ptr // убран из 17 стандарта, устарел и не должен использоваться
#include <memory>
	std::unique_ptr - std::unique_ptr<Fraction> f1 = std::make_unique<Fraction>(7, 9);
	std::shared_ptr - std::shared_ptr<Item> ptr2 = std::make_shared<Item>();
	std::scoped_ptr
	std::weak_ptr - .lock()

gl-value (“обобщённое” lvalue) это выражение, оценка которого определяет идентичность объекта или функции
x-value (“eXpiring” значение - “истекающее” значение) это glvalue, которое обозначает объект, ресурсы которого могут быть использованы повторно
l-value (называемое так исторически, потому что lvalue может появляться в левой части выражения присваивания) это glvalue, не являющееся xvalue

r-value (называемое так исторически, потому что rvalue может появляться в правой части выражения присваивания) это prvalue или xvalue.
pr-value (“pure” rvalue - “чистое” rvalue) это выражение которое вычисляет значение операнда встроенного оператора или инициализирует объек

int x = 7;
int &lref = x; // инициализация ссылки l-value переменной x (значение l-value)
int &&rref = 7; // инициализация ссылки r-value литералом 7 (значение r-value)

// Ссылки l-value
int &ref1 = x;
int &ref2 = 7; // не скомпилируется
const int &ref3 = x;
const int &ref4 = 7;
 
// Ссылки r-value
int &&ref5 = x; // не скомпилируется
int &&ref6 = 7;
const int &&ref7 = x; // не скомпилируется
const int &&ref8 = 7;

	// Конструктор копирования, который выполняет глубокое копирование x.m_ptr в m_ptr
	Auto_ptr4(const Auto_ptr4& x)
	{
		m_ptr = new T;
		*m_ptr = *x.m_ptr;
	}
	// Конструктор перемещения, который передает право собственности на x.m_ptr в m_ptr
	Auto_ptr4(Auto_ptr4&& x) : m_ptr(x.m_ptr)
	{
		x.m_ptr = nullptr;
	}
	// Оператор присваивания копированием, который выполняет глубокое копирование x.m_ptr в m_ptr
	Auto_ptr4& operator=(const Auto_ptr4& x)
	{
		// Проверка на самоприсваивание
		if (&x == this)
			return *this;
 
		// Удаляем всё, что к этому моменту может хранить указатель 
		delete m_ptr;
 
		// Копируем передаваемый объект
		m_ptr = new T;
		*m_ptr = *x.m_ptr;
 
		return *this;
	}
	// Оператор присваивания перемещением, который передает право собственности на x.m_ptr в m_ptr
	Auto_ptr4& operator=(Auto_ptr4&& x)
	{
		// Проверка на самоприсваивание
		if (&x == this)
			return *this;
 
		// Удаляем всё, что к этому моменту может хранить указатель 
		delete m_ptr;
 
		// Передаем право собственности на x.m_ptr в m_ptr
		m_ptr = x.m_ptr;
		x.m_ptr = nullptr;
 
		return *this;
	}

std::move() — функция, которая конвертирует передаваемый аргумент в r-value