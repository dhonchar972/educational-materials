Phases of translation:
	Preprocessing:
		1. Сопоставление символов:
			a) Замена соответствующих диграфов и триграфов на эквивалентные символы("??=" в "#", "??/" в "\"), легаси для терминалов
			b) Зависящие от ОС индикаторы конца строки заменяются символами новой строки.
		2. Соединение строк(операции(команды) разбитые на несколько строк символом "\" соединяются в одну строку, соединение переносов строки)
		3. Выделение лексем(лексический анализ или токенизация, распознание во входной последовательности символов грамматических конструкций языка):
			Исходный файл разбивается на комментарии, последовательности пробельных символов и токены предварительной обработки:
				a) имена заголовков, такие как <iostream> или "myfile.h"
				b) идентификаторы
				c) числа предварительной обработки
				d) символьные и строковые литералы
				e) операторы и знаки препинания такие как "+", "<<=", "<%", "##" или "and"
				f) отдельные непробельные символы, которые не подходят ни к какой другой категории
		4. Предварительной обработки(выполняются директивы предварительной обработки, макросы разворачиваются в исходный файл)

	Compiling:
		5. Сопоставление кодировки(все члены и escape-последовательности в исходной кодировке преобразуются в эквивалентные значения в кодировке выполнения(ASCII, UTF8))
		6. Конкатенация строк("String " "concatenation" -> "String concatenation")
		7. Перевод(трансляция (лексемы) -> (обьектный код))Происходит компиляция: 
			a) Каждый токен препроцессинга конвертируется в токен. 
			b) Токены синтаксически и семантически анализируются и переводятся как "translation unit".
		8. Компоновка:
			Каждый "Translation Unit" проверяется, чтобы создать список требуемых экземпляров шаблона, включая те, которые запрошены явными экземплярами. 
			Находятся места определения шаблонов, и генерируются необходимые реализации для создания "Unstantiation Unit".
		
	Linking:
		9. Сборка образа:
			Translation Unit's, Instantiation Unit's и библиотеки(статические .lib - "library", .a - "archive" | динамические .dll - "dynamic link library", .so - "shared object"), 
			необходимые для разрешения внешних зависимостей, собираются в образ программы, который содержит информацию, необходимую для исполнения(.exe, .out)


https://en.cppreference.com/w/cpp/language/translation_phases
https://learn.microsoft.com/ru-ru/cpp/preprocessor/phases-of-translation?view=msvc-170
