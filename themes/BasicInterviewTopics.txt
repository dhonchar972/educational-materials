Java:
1. exceptions(checked, unchecked), how to find type, create custom, stackoverflow and how to throw it
2. optional, it methods, orElse, orElseGet
3. lambdas, functional interfaces, how it works "under the hood", popular standard implementations, packing and unpacking
4. stream API, intermediate and terminal functions, collectors
5. multithreading, async, concurrency, locking, sync primitives, volatile, atomic, ForkJoinPool, FixedThreadPool, ExecutorService, Runnable, Callable, Future, CompletableFuture
6. anotations, reflection
7. patterns
8. lombok
9. WeakReference, SoftReference
10. regex
11. OOP, SOLID, DRY, KISS
12. GC, finalize
13. Phaser API
14. serialization and marshaling
15. CAS
16. file read/write, stream read/write

Spring:
1. DI and IoC, been scope, application context
2. AOP, proxy, transactions, isolation levels, locking, versioning, propagation, optimistic vs pessimistic lock
3. validation
4. testing
5. security, authorization, authorization errors,  SSL vs TLS(mTLS), JWT(JSON Web Token), certificates
6. boot, configurations
7. REST, routing, http request, what consist, requests, responce, model osi, TCP vs UDP
8. messaging
9. WebSocket
10. Reactor, WebFlux, RSocket
11. integration and cloud, cloud stream
12. project structure, controllers, DAO, services, repositories, servlet, servlet dispatcher
13. data, jdbc, jpa, hibernate, difference between first and second level cache, n+1 select problem, join, fetch, eager, lazy
14. flyway
15. caching

SQL:
1. remove all usernames with duplicates
"select username from users group by username having(count(id>1));"
2. transaction
3. foreign key, primary key, references, oneToMany, oneToOne, constraints, index
4. find all card's by users id's
"select * from cards where cards.user_id in(4, 67, 122);"
5. find all user id's, that have more than one card
"select user_id from cards group by user_id having (count(*) > 1);"
6. audit columns(CreatedAt, UpdatedAt, CreatedBy, UpdatedBy)

GIT:
1. cherry pick
2. pull, push, fetch, merge, commit, branch

Microservices:
1. Docker
2. massaging
3. tracing(Spring Cloud Sleuth)

C#:
1. clr, dotnet
2. ref / out
3. class/structure
4. static class, static constuctor
5. multithreading, async/await, concurrency, locking, sync primitives
6. dispose, finalize, GC
7. LINQ
8. collections(List, LinkedList, HashSet, Dictionary, Queue, Stack, ObservableCollection, IEnumerable, IQueryable)
9. generic's
10. lambda's, delegates, Action, Predicate, Func
11. exceptions
12. attributes, reflection
13. readonly, const
14. using, this, is, as, in
15. serialization and marshaling
16. params
17. nullable types

EF, Dapper:
1.

ASP:
0. ASP
1. ID, IoC
2. routing, controllers
3. validation
4. AOP, proxy, transactions, isolation levels, locking, versioning
6. life cycle(application, page)
7. testing
8. security, authorization
9. configurations
10. REST, http request, what consist, requests, responce
11. Global.asax??????
12. state(app, cookie, view, session)
13. caching