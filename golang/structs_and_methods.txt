package main

import (
	"fmt"
)

type Name interface {
	Method(int)int
}

type NameImpl struct {
	Value1 int
	Value2 string
}

func StaticFunc(v int)(r int) {
	fmt.Println(v)
	return r 
}

func (n NameImpl) Method(v int)(r int) { // static method, does not refer to an instance(self)
	fmt.Println(v)
	return v
}

func (n *NameImpl) Method2(v int)(r int) { // struct method, can change its state(modify the receiver)
	fmt.Println(v)
	return v
}

func main() {
	n := NameImpl{12, "aboba"}
	z := n.Method(n.Value1)
	fmt.Println(z)
}

/////////////////////////////////////////////////////////////////Empty Interface's////////////////////////////////////////////

func main() {
	var i interface{}
	describe(i) // (<nil>, <nil>)

	i = 42
	describe(i) // (42, int)

	i = "hello"
	describe(i) // (hello, string)
}

func describe(i interface{}) {
	fmt.Printf("(%v, %T)\n", i, i) // v - value, T - type
}

//////////////////////////////////////////////////////////////////Check type//////////////////////////////////////////////////

func main() {
	var i interface{} = "hello"

	s := i.(string)
	fmt.Println(s) // hello

	s, ok := i.(string)
	fmt.Println(s, ok) // hello true

	f, ok := i.(float64)
	fmt.Println(f, ok) // 0 false

	f = i.(float64) // panic
	fmt.Println(f)
}

////////////////////////////////////////////////////////Nil interface/////////////////////////////////////////////////////////

var i interface{}
fmt.Println("a == nil: ", i == nil) // true

var p *int = nil
i = p
fmt.Println("b == nil: ", i == nil) // false

interface consists "dynamic type" and "dynamic value"

func Foo(x interface{}) {
    fmt.Println("22, x == nil = ", (x).(*int) == nil)  // true
}
func main() {
    var x *int = nil
    fmt.Println("11, x == nil = ", x == nil)  // true
    Foo(x)  // true
}

/////////////////////////////////////////////////////////Type swith///////////////////////////////////////////////////////////

switch v := i.(type) {
case T:
    // here v has type T
case S:
    // here v has type S
default:
    // no match; here v has the same type as i
}

